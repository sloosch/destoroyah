{"name":"Destoroyah","tagline":"disastrous quickcheck-like testing framework - let the disaster happen during development, not after deployment","body":"##Disaster Driven Development\r\n_disastrous quickcheck-like testing framework - let the disaster happen during development, not after deployment_\r\n\r\n>[...]Destoroyah is also the only enemy that actually hurt Godzilla emotionally when he killed Godzilla Jr.\r\n\r\n###What is this for?\r\nAs an example we will try to write a function that repeats a char n times  \r\n####BDD style, coding by example  \r\n```coffeescript\r\ndescribe 'char repeater', ->\r\n  it 'should return a string of given length', ->\r\n    generated = charRepeater('c', 100)\r\n    expect(generated.length).toBe(100)\r\n```\r\nwill may raise the implementation\r\n```coffeescript\r\ncharRepeater = (char, length) -> (char for [1..length]).join ''\r\n```\r\nTest is green! Deploy!  \r\nlet the disaster happen: `charRepeater('a', 0)` ... gives `a` ?! but the test said its ok!  \r\nforgot the not so obvious case:\r\n```coffeescript\r\nit 'should return a zero length string when given length is 0', ->\r\n  generated = charRepeater('c', 0)\r\n  expect(generated.length).toBe(0)\r\n```\r\n...\r\n####DDD style, no need to think of every possible argument\r\nwrite a [disaster](https://github.com/sloosch/destoroyah/blob/master/introduction.litcoffee)\r\n```coffeescript\r\nawake 'Repeater', ->\r\n  rampage 'on the char repeater', (char, pInt_length) ->\r\n    generated = charRepeater(char, pInt_length)\r\n    return generated.length is 0 if char is null or char is ''\r\n    generated.length is pInt_length\r\n```\r\nnow **destoroyah** will complain that the `charRepeater` doesn't fulfill our hopes in each case  \r\n**destoroyah** will force you to the correct implementation  \r\n```coffeescript\r\ncharRepeater = (char, length) ->\r\n  return '' if length == 0\r\n  (char for [1..length]).join ''\r\n```\r\n\r\n###Why you should care?\r\nBecause whether you not me can think of all possibilities that can happen to your functions.\r\nBad arguments like NULL, an empty string, empty array... in combination with good arguments.\r\nA quickcheck framework knows these edge cases and tests them.\r\nEven further it generates hundreds of test cases for you.\r\nThe function will by tested with all possible cases - not just the ones we thought about.\r\n\r\n###Disasters\r\nWrite your **disasters** according to the [introduction](https://github.com/sloosch/destoroyah/blob/master/introduction.litcoffee)\r\nYou may want to consider using coffee-script to keep your disasters as clean as possible.\r\n\r\n#####Why those names? \"awake\", \"rampage\", \"angryness\", \"attack\", \"hope\"....\r\nBecause writing tests should be fun!  \r\n\"A monster is going on a rampage on your functions by attacking it with arguments.\r\nYou can just sit there and hope that your function withstands these attacks.\"\r\nNo this is no joke, it is a fully working simple to use QuickCheck testing library.\r\n\r\n#####I don't like these childish names! How do they translate to my beloved BDD?\r\n- awake = describe\r\n- rampage = it\r\n- hope = expect\r\n- monster = specification\r\n- attacks = generated arguments you use for your function\r\n- angryness = maximum number of test cases\r\n\r\n###Install\r\n\r\n`npm install -g destoroyah`\r\n\r\n\r\n###Can i win the Fields Medal?\r\nYes you can [BhargavaZil](https://github.com/sloosch/destoroyah/blob/master/disasters/BhargavaZil.coffee)!\r\n\r\n###Burn!\r\nopen the terminal and type `destoroyah [--watch] [disasters]` e.g. `destoroyah './disasters/*Zil.coffee'` to run each disaster in the 'disasters' folder.  \r\n`--watch` will run the disasters after each file change in the current directory\r\n\r\n    Usage: destoroyah [options] [files]\r\n\r\n      Options:\r\n\r\n        -h, --help                         output usage information\r\n        -V, --version                      output the version number\r\n        -w, --watch                        run disasters on file changes (changes on disaster files are always watched, even when -e or -d are set)\r\n        -e, --watchExtension <extensions>  file extension to watch for changes - defaults to \"js, coffee\"\r\n        -d, --watchDirectory <paths>       only watch files in this directories - defaults to the current working directory\r\n\r\n###Karma\r\nto run with karma use [karma-destoroyah](https://github.com/sloosch/karma-destoroyah)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}