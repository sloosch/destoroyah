#!/usr/bin/env node
var DestoroyahRunner, chalk, defaultExtensions, disasterFiles, gaze, glob, lastRun, list, path, pkg, program, run, runQueue, toWatch, util, waiting, wd;

DestoroyahRunner = require('./../lib/runner/default');

gaze = require('gaze');

glob = require('glob');

path = require('path');

util = require('./../lib/destoroyah/util');

program = require('commander');

pkg = require('./../package.json');

chalk = require('chalk');

try {
  require('coffee-script').register();
} catch (_error) {}

list = function(val) {
  return val.split(', ');
};

program.version(pkg.version).usage('[options] [files]').option('-w, --watch', 'run disasters on file changes (changes on disaster files are always watched, even when -e or -d are set)').option('-e, --watchExtension <extensions>', 'file extension to watch for changes - defaults to "js, coffee"', list).option('-d, --watchDirectory <paths>', 'only watch files in this directories - defaults to the current working directory', list).parse(process.argv);

disasterFiles = program.args;

if (disasterFiles.length === 0) {
  disasterFiles = ['disasters/*'];
}

lastRun = null;

run = function() {
  var files, runner;
  files = disasterFiles.reduce((function(acc, g) {
    return acc.concat(glob.sync(g));
  }), []).map(function(e) {
    return path.resolve(e);
  });
  runner = new DestoroyahRunner(files);
  return lastRun = runner.run()["catch"](function(e) {
    return console.error(chalk.red('ERROR: ' + e));
  });
};

if (program.watch != null) {
  runQueue = [];
  wd = program.watchDirectory != null ? program.watchDirectory : [process.cwd()];
  defaultExtensions = ['js', 'coffee'];
  if (program.watchExtension != null) {
    defaultExtensions = program.watchExtension;
  }
  toWatch = disasterFiles.slice(0);
  wd.forEach(function(dir) {
    toWatch = toWatch.concat(defaultExtensions.map(function(e) {
      return dir + '/**/*.' + e;
    }));
    return toWatch.push('!' + dir + '/node_modules/**');
  });
  waiting = false;
  gaze(toWatch, function(err, watcher) {
    if (err) {
      console.error(err);
      process.exit(1);
    }
    return this.on('all', function(event, filepath) {
      runQueue.push({
        event: event,
        filepath: filepath
      });
      if (!waiting) {
        waiting = true;
        return util["finally"](lastRun, function() {
          var ev, i, len;
          for (i = 0, len = runQueue.length; i < len; i++) {
            ev = runQueue[i];
            console.log(ev.event + ' ' + ev.filepath);
            delete require.cache[ev.filepath];
          }
          runQueue = [];
          waiting = false;
          return run();
        });
      }
    });
  });
}

util["finally"](run(), function(broken) {
  if (broken && (program.watch == null)) {
    return process.exit(1);
  }
});
